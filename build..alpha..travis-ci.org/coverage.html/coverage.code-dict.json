{"/home/travis/build/npmtest/node-npmtest-juice/test.js":"/* istanbul instrument in package npmtest_juice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-juice/lib.npmtest_juice.js":"/* istanbul instrument in package npmtest_juice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_juice = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_juice = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-juice/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-juice && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_juice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_juice\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_juice.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_juice.rollup.js'] =\n            local.assetsDict['/assets.npmtest_juice.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_juice.__dirname + '/lib.npmtest_juice.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/index.js":" 'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./lib/utils');\nvar packageJson = require('./package');\nvar fs = require('fs');\nvar path = require('path');\nvar inline = require('web-resource-inliner');\nvar juiceClient = require('./client');\nvar cheerio = require('./lib/cheerio');\nvar juice = juiceClient;\n\nmodule.exports = juice;\n\njuice.version = packageJson.version;\n\njuice.Selector = utils.Selector;\njuice.Property = utils.Property;\njuice.utils = utils;\n\njuice.ignoredPseudos = juiceClient.ignoredPseudos;\njuice.widthElements = juiceClient.widthElements;\njuice.tableElements = juiceClient.tableElements;\njuice.nonVisualElements = juiceClient.nonVisualElements;\njuice.styleToAttribute = juiceClient.styleToAttribute;\n\njuice.juiceDocument = juiceClient.juiceDocument;\njuice.inlineDocument = juiceClient.inlineDocument;\njuice.inlineContent = juiceClient.inlineContent;\n\njuice.juiceFile = juiceFile;\njuice.juiceResources = juiceResources;\njuice.inlineExternal = inlineExternal;\n\njuice.codeBlocks = cheerio.codeBlocks;\n\nfunction juiceFile(filePath, options, callback) {\n  // set default options\n  fs.readFile(filePath, 'utf8', function(err, content) {\n    if (err) {\n      return callback(err);\n    }\n    options = utils.getDefaultOptions(options); // so we can mutate options without guilt\n    if (!options.webResources.relativeTo) {\n      var rel = path.dirname(path.relative(process.cwd(),filePath));\n      options.webResources.relativeTo = rel;\n    }\n    juiceResources(content, options, callback);\n  });\n}\n\nfunction inlineExternal(html, inlineOptions, callback) {\n  var options = utils.extend({fileContent: html}, inlineOptions);\n  inline.html(options, callback);\n}\n\nfunction juiceResources(html, options, callback) {\n  options = utils.getDefaultOptions(options);\n\n  var onInline = function(err, html) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null,\n      cheerio(html, { xmlMode: options && options.xmlMode}, juiceClient.juiceDocument, [options])\n    );\n  };\n\n  options.webResources.relativeTo = options.webResources.relativeTo || options.url; // legacy support\n  inlineExternal(html, options.webResources, onInline);\n}\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/utils.js":"'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar mensch = require('mensch');\nvar own = {}.hasOwnProperty;\nvar os = require('os');\nvar Selector = require('./selector');\nvar Property = require('./property');\n\nexports.Selector = Selector;\nexports.Property = Property;\n\n/**\n * Returns an array of the selectors.\n *\n * @license Sizzle CSS Selector Engine - MIT\n * @param {String} selectorText from mensch\n * @api public\n */\n\nexports.extract = function extract(selectorText) {\n  var attr = 0;\n  var sels = [];\n  var sel = '';\n\n  for (var i = 0, l = selectorText.length; i < l; i++) {\n    var c = selectorText.charAt(i);\n\n    if (attr) {\n      if (']' === c || ')' === c) { attr--; }\n      sel += c;\n    } else {\n      if (',' === c) {\n        sels.push(sel);\n        sel = '';\n      } else {\n        if ('[' === c || '(' === c) { attr++; }\n        if (sel.length || (c !== ',' && c !== '\\n' && c !== ' ')) { sel += c; }\n      }\n    }\n  }\n\n  if (sel.length) {\n    sels.push(sel);\n  }\n\n  return sels;\n};\n\n/**\n * Returns a parse tree for a CSS source.\n * If it encounters multiple selectors separated by a comma, it splits the\n * tree.\n *\n * @param {String} css source\n * @api public\n */\n\nexports.parseCSS = function(css) {\n  var parsed = mensch.parse(css, {position: true, comments: true});\n  var rules = typeof parsed.stylesheet != 'undefined' && parsed.stylesheet.rules ? parsed.stylesheet.rules : [];\n  var ret = [];\n\n  for (var i = 0, l = rules.length; i < l; i++) {\n    if (rules[i].type == 'rule') {\n      var rule = rules[i];\n      var selectors = rule.selectors;\n\n      for (var ii = 0, ll = selectors.length; ii < ll; ii++) {\n        ret.push([selectors[ii], rule.declarations]);\n      }\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Returns preserved text for a CSS source.\n *\n * @param {String} css source\n * @param {Object} options\n * @api public\n */\n\nexports.getPreservedText = function(css, options) {\n  var parsed = mensch.parse(css, {position: true, comments: true});\n  var rules = typeof parsed.stylesheet != 'undefined' && parsed.stylesheet.rules ? parsed.stylesheet.rules : [];\n  var preserved = [];\n  var lastStart = null;\n\n  for (var i = rules.length - 1; i >= 0; i--) {\n    if ((options.fontFaces && rules[i].type === 'font-face') ||\n        (options.mediaQueries && rules[i].type === 'media')) {\n      preserved.push(\n        mensch.stringify(\n          { stylesheet: { rules: [ rules[i] ] }},\n          { comments: false, indentation: '  ' }\n        )\n      );\n    }\n    lastStart = rules[i].position.start;\n  }\n\n  if (preserved.length === 0) return false;\n  return os.EOL+preserved.join(os.EOL)+os.EOL;\n};\n\nexports.normalizeLineEndings = function(text) {\n  return text.replace(/\\r\\n/g, '\\n').replace(/\\n/g, '\\r\\n');\n};\n\n\n/**\n * Compares two specificity vectors, returning the winning one.\n *\n * @param {Array} vector a\n * @param {Array} vector b\n * @return {Array}\n * @api public\n */\n\nexports.compareFunc = function(a, b) {\n  var min = Math.min(a.length, b.length);\n  for (var i = 0; i < min; i++) {\n    if (a[i] === b[i]) { continue; }\n    if (a[i] > b[i]) { return 1; }\n    return -1;\n  }\n\n  return a.length-b.length;\n};\n\nexports.compare = function(a, b) {\n  return exports.compareFunc(a, b) == 1 ? a : b;\n};\n\nexports.extend = function(obj, src) {\n  for (var key in src) {\n    if (own.call(src, key)) {\n      obj[key] = src[key];\n    }\n  }\n  return obj;\n};\n\nexports.getDefaultOptions = function(options) {\n  var result = exports.extend({\n    extraCss: '',\n    insertPreservedExtraCss: true,\n    applyStyleTags: true,\n    removeStyleTags: true,\n    preserveMediaQueries: true,\n    preserveFontFaces: true,\n    applyWidthAttributes: true,\n    applyHeightAttributes: true,\n    applyAttributesTableElements: true,\n    url: ''\n  }, options);\n\n  result.webResources = result.webResources || {};\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/selector.js":"'use strict';\n\nvar parser = require('slick/parser');\n\nmodule.exports = exports = Selector;\n\n/**\n * CSS selector constructor.\n *\n * @param {String} selector text\n * @param {Array} optionally, precalculated specificity\n * @api public\n */\n\nfunction Selector(text, styleAttribute) {\n  this.text = text;\n  this.spec = undefined;\n  this.styleAttribute = styleAttribute || false;\n}\n\n/**\n * Get parsed selector.\n *\n * @api public\n */\n\nSelector.prototype.parsed = function() {\n  if (!this.tokens) { this.tokens = parse(this.text); }\n  return this.tokens;\n};\n\n/**\n * Lazy specificity getter\n *\n * @api public\n */\n\nSelector.prototype.specificity = function() {\n  var styleAttribute = this.styleAttribute;\n  if (!this.spec) { this.spec = specificity(this.text, this.parsed()); }\n  return this.spec;\n\n  function specificity(text, parsed) {\n    var expressions = parsed || parse(text);\n    var spec = [styleAttribute ? 1 : 0, 0, 0, 0];\n    var nots = [];\n\n    for (var i = 0; i < expressions.length; i++) {\n      var expression = expressions[i];\n      var pseudos = expression.pseudos;\n\n      // id awards a point in the second column\n      if (expression.id) { spec[1]++; }\n\n      // classes and attributes award a point each in the third column\n      if (expression.attributes) { spec[2] += expression.attributes.length; }\n      if (expression.classList) { spec[2] += expression.classList.length; }\n\n      // tag awards a point in the fourth column\n      if (expression.tag && expression.tag !== '*') { spec[3]++; }\n\n      // pseudos award a point each in the fourth column\n      if (pseudos) {\n        spec[3] += pseudos.length;\n\n        for (var p = 0; p < pseudos.length; p++) {\n          if (pseudos[p].name === 'not') {\n            nots.push(pseudos[p].value);\n            spec[3]--;\n          }\n        }\n      }\n    }\n\n    for (var ii = nots.length; ii--;) {\n      var not = specificity(nots[ii]);\n      for (var jj = 4; jj--;) { spec[jj] += not[jj]; }\n    }\n\n    return spec;\n  }\n};\n\n/**\n * Parses a selector and returns the tokens.\n *\n * @param {String} selector\n * @api private.\n */\n\nfunction parse(text) {\n  try {\n    return parser(text)[0];\n  } catch (e) {\n    return [];\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/property.js":"'use strict';\n\nmodule.exports = exports = Property;\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * CSS property constructor.\n *\n * @param {String} property\n * @param {String} value\n * @param {Selector} selector the property originates from\n * @param {Integer} priority 0 for normal properties, 2 for !important properties.\n * @param {Array} additional array of integers representing more detailed priorities (sorting)\n * @api public\n */\n\nfunction Property(prop, value, selector, priority, additionalPriority) {\n  this.prop = prop;\n  this.value = value;\n  this.selector = selector;\n  this.priority = priority || 0;\n  this.additionalPriority = additionalPriority || [];\n}\n\n/**\n * Compares with another Property based on Selector#specificity.\n *\n * @api public\n */\n\nProperty.prototype.compareFunc = function(property) {\n  var a = [];\n  a.push.apply(a, this.selector.specificity());\n  a.push.apply(a, this.additionalPriority);\n  a[0] += this.priority;\n  var b = [];\n  b.push.apply(b, property.selector.specificity());\n  b.push.apply(b, property.additionalPriority);\n  b[0] += property.priority;\n  return utils.compareFunc(a, b);\n};\n\nProperty.prototype.compare = function(property) {\n  var winner = this.compareFunc(property);\n  if (winner === 1) return this;\n  return property;\n};\n\n\n/**\n * Returns CSS property\n *\n * @api public\n */\n\nProperty.prototype.toString = function() {\n  return this.prop + ': ' + this.value.replace(/['\"]+/g, '') + ';';\n};\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/client.js":"'use strict';\n\nvar cheerio = require('./lib/cheerio');\nvar makeJuiceClient = require('./lib/inline');\n\n/**\n * Note that makeJuiceClient will take a base object (in this case a function) and enhance it\n * with a lot of useful properties and functions.\n *\n * This client adopts cheerio as a DOM parser and adds an \"inlineContent\" function that let\n * users to specify the CSS to be inlined instead of extracting it from the html.\n * \n * The weird \"makeJuiceClient\" behaviour is there in order to keep backward API compatibility.\n */\nvar juiceClient = makeJuiceClient(function(html,options) {\n  return cheerio(html, { xmlMode: options && options.xmlMode}, juiceDocument, [options]);\n});\n\nvar juiceDocument = function(html, options) {\n  return juiceClient.juiceDocument(html, options);\n}\n\njuiceClient.inlineContent = function(html, css, options) {\n  return cheerio(html, { xmlMode: options && options.xmlMode}, juiceClient.inlineDocument, [css, options]);\n};\n\nmodule.exports = juiceClient;\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/cheerio.js":"'use strict';\n\n/**\n * Module dependencies.\n */\nvar cheerio = require('cheerio');\nvar utils = require('./utils');\n\nvar cheerioLoad = function(html, options) {\n  options = utils.extend({decodeEntities: false}, options || {});\n  html = encodeEntities(html);\n  return cheerio.load(html,options);\n};\n\nvar encodeCodeBlocks = function(html) {\n  var blocks = module.exports.codeBlocks;\n  Object.keys(blocks).forEach(function(key) {\n    var re = new RegExp(blocks[key].start + '((.|\\\\s)*?)' + blocks[key].end, 'g');\n    html = html.replace(re, function(match, subMatch) {\n      return '<!--' + key + ' ' + blocks[key].start + subMatch + blocks[key].end + ' -->';\n    });\n  });\n  return html;\n};\n\nvar decodeCodeBlocks = function(html) {\n  var blocks = module.exports.codeBlocks;\n  Object.keys(blocks).forEach(function(key) {\n    var re = new RegExp('<!--' + key + ' ' + blocks[key].start + '((.|\\\\s)*?)' + blocks[key].end + ' -->', 'g');\n    html = html.replace(re, function(match, subMatch) {\n      return blocks[key].start + subMatch + blocks[key].end;\n    });\n  });\n  return html;\n};\n\nvar encodeEntities = function(html) {\n  return encodeCodeBlocks(html);\n};\n\nvar decodeEntities = function(html) {\n  return decodeCodeBlocks(html);\n};\n\n/**\n * Parses the input, calls the callback on the parsed DOM, and generates the output\n *\n * @param {String} html input html to be processed\n * @param {Object} options for the parser\n * @param {Function} callback to be invoked on the DOM\n * @param {Array} callbackExtraArguments to be passed to the callback\n * @return {String} resulting html\n */\nmodule.exports = function(html, options, callback, callbackExtraArguments) {\n  var $ = cheerioLoad(html, options);\n  var args = [ $ ];\n  args.push.apply(args, callbackExtraArguments);\n  var doc = callback.apply(undefined, args) || $;\n\n  if (options && options.xmlMode) {\n    return doc.xml();\n  }\n  return decodeEntities(doc.html());\n};\n\nmodule.exports.codeBlocks = {\n  EJS: { start: '<%', end: '%>' },\n  HBS: { start: '{{', end: '}}' }\n};\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/inline.js":"'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = function makeJuiceClient(juiceClient) {\n\njuiceClient.ignoredPseudos = ['hover', 'active', 'focus', 'visited', 'link'];\njuiceClient.widthElements = ['TABLE', 'TD', 'IMG'];\njuiceClient.heightElements = ['TABLE', 'TD', 'IMG'];\njuiceClient.tableElements = ['TABLE', 'TD', 'TH', 'TR', 'TD', 'CAPTION', 'COLGROUP', 'COL', 'THEAD', 'TBODY', 'TFOOT'];\njuiceClient.nonVisualElements = [ 'HEAD', 'TITLE', 'BASE', 'LINK', 'STYLE', 'META', 'SCRIPT', 'NOSCRIPT' ];\njuiceClient.styleToAttribute = {\n  'background-color': 'bgcolor',\n  'background-image': 'background',\n  'text-align': 'align',\n  'vertical-align': 'valign'\n};\njuiceClient.excludedProperties = [];\n\njuiceClient.juiceDocument = juiceDocument;\njuiceClient.inlineDocument = inlineDocument;\n\nfunction inlineDocument($, css, options) {\n\n  options = options || {};\n  var rules = utils.parseCSS(css);\n  var editedElements = [];\n  var styleAttributeName = 'style';\n\n  if (options.styleAttributeName) {\n    styleAttributeName = options.styleAttributeName;\n  }\n\n  rules.forEach(handleRule);\n  editedElements.forEach(setStyleAttrs);\n\n  if (options.inlinePseudoElements) {\n    editedElements.forEach(inlinePseudoElements);\n  }\n\n  if (options.applyWidthAttributes) {\n    editedElements.forEach(function(el) {\n      setDimensionAttrs(el, 'width');\n    });\n  }\n\n  if (options.applyHeightAttributes) {\n    editedElements.forEach(function(el) {\n      setDimensionAttrs(el, 'height');\n    });\n  }\n\n  if (options.applyAttributesTableElements) {\n    editedElements.forEach(setAttributesOnTableElements);\n  }\n\n  if (options.insertPreservedExtraCss && options.extraCss) {\n    var preservedText = utils.getPreservedText(options.extraCss, {\n      mediaQueries: options.preserveMediaQueries,\n      fontFaces: options.preserveFontFaces\n    });\n    if (preservedText) {\n      var $appendTo = null;\n      if (options.insertPreservedExtraCss !== true) {\n        $appendTo = $(options.insertPreservedExtraCss);\n      } else {\n        $appendTo = $('head');\n        if (!$appendTo.length) { $appendTo = $('body'); }\n        if (!$appendTo.length) { $appendTo = $.root(); }\n      }\n\n      $appendTo.first().append('<style>' + preservedText + '</style>');\n    }\n  }\n\n  function handleRule(rule) {\n    var sel = rule[0];\n    var style = rule[1];\n    var selector = new utils.Selector(sel);\n    var parsedSelector = selector.parsed();\n    var pseudoElementType = getPseudoElementType(parsedSelector);\n\n    // skip rule if the selector has any pseudos which are ignored\n    for (var i = 0; i < parsedSelector.length; ++i) {\n      var subSel = parsedSelector[i];\n      if (subSel.pseudos) {\n        for (var j = 0; j < subSel.pseudos.length; ++j) {\n          var subSelPseudo = subSel.pseudos[j];\n          if (juiceClient.ignoredPseudos.indexOf(subSelPseudo.name) >= 0) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (pseudoElementType) {\n      var last = parsedSelector[parsedSelector.length - 1];\n      var pseudos = last.pseudos;\n      last.pseudos = filterElementPseudos(last.pseudos);\n      sel = parsedSelector.toString();\n      last.pseudos = pseudos;\n    }\n\n    var els;\n    try {\n      els = $(sel);\n    } catch (err) {\n      // skip invalid selector\n      return;\n    }\n\n    els.each(function() {\n      var el = this;\n\n      if (el.name && juiceClient.nonVisualElements.indexOf(el.name.toUpperCase()) >= 0) {\n        return;\n      }\n\n      if (pseudoElementType) {\n        var pseudoElPropName = 'pseudo' + pseudoElementType;\n        var pseudoEl = el[pseudoElPropName];\n        if (!pseudoEl) {\n          pseudoEl = el[pseudoElPropName] = $('<span />').get(0);\n          pseudoEl.pseudoElementType = pseudoElementType;\n          pseudoEl.pseudoElementParent = el;\n          el[pseudoElPropName] = pseudoEl;\n        }\n        el = pseudoEl;\n      }\n\n      if (!el.styleProps) {\n        el.styleProps = {};\n\n        // if the element has inline styles, fake selector with topmost specificity\n        if ($(el).attr(styleAttributeName)) {\n          var cssText = '* { ' + $(el).attr(styleAttributeName) + ' } ';\n          addProps(utils.parseCSS(cssText)[0][1], new utils.Selector('<style>', true));\n        }\n\n        // store reference to an element we need to compile style=\"\" attr for\n        editedElements.push(el);\n      }\n\n      // go through the properties\n      function addProps(style, selector) {\n        for (var i = 0, l = style.length; i < l; i++) {\n          if (style[i].type == 'property') {\n            var name = style[i].name;\n            var value = style[i].value;\n            var important = style[i].value.match(/!important$/) !== null;\n            if (important && !options.preserveImportant) value = value.replace(/\\s*!important$/, '');\n            // adds line number and column number for the properties as \"additionalPriority\" to the\n            // properties because in CSS the position directly affect the priority.\n            var additionalPriority = [style[i].position.start.line, style[i].position.start.col];\n            var prop = new utils.Property(name, value, selector, important ? 2 : 0, additionalPriority);\n            var existing = el.styleProps[name];\n\n            // if property name is not in the excluded properties array\n            if (juiceClient.excludedProperties.indexOf(name) < 0) {\n              if (existing && existing.compare(prop) === prop || !existing) {\n                // deleting a property let us change the order (move it to the end in the setStyleAttrs loop)\n                if (existing && existing.selector !== selector) {\n                  delete el.styleProps[name];\n                } else if (existing) {\n                  // make \"prop\" a special composed property.\n                  prop.nextProp = existing;\n                }\n\n                el.styleProps[name] = prop;\n              }\n            }\n          }\n        }\n      }\n\n      addProps(style, selector);\n    });\n  }\n\n  function setStyleAttrs(el) {\n    var l = Object.keys(el.styleProps).length;\n    var props = [];\n    // Here we loop each property and make sure to \"expand\"\n    // linked \"nextProp\" properties happening when the same property\n    // is declared multiple times in the same selector.\n    Object.keys(el.styleProps).forEach(function(key) {\n      var np = el.styleProps[key];\n      while (typeof np !== 'undefined') {\n        props.push(np);\n        np = np.nextProp;\n      }\n    });\n    // sort properties by their originating selector's specificity so that\n    // props like \"padding\" and \"padding-bottom\" are resolved as expected.\n    props.sort(function(a, b) {\n      return a.compareFunc(b);\n    });\n    var string = props\n      .filter(function(prop) {\n        // Content becomes the innerHTML of pseudo elements, not used as a\n        // style property\n        return prop.prop !== 'content';\n      })\n      .map(function(prop) {\n        return prop.prop + ': ' + prop.value.replace(/[\"]/g, '\\'') + ';';\n      })\n      .join(' ');\n    if (string) {\n      $(el).attr(styleAttributeName, string);\n    }\n  }\n\n  function inlinePseudoElements(el) {\n    if (el.pseudoElementType && el.styleProps.content) {\n      var parsed = parseContent(el.styleProps.content.value);\n      if (parsed.img) {\n        el.name = 'img';\n        $(el).attr('src', parsed.img);\n      } else {\n        $(el).text(parsed);\n      }\n      var parent = el.pseudoElementParent;\n      if (el.pseudoElementType === 'before') {\n        $(parent).prepend(el);\n      } else {\n        $(parent).append(el);\n      }\n    }\n  }\n\n  function setDimensionAttrs(el, dimension) {\n    if (!el.name) { return; }\n    var elName = el.name.toUpperCase();\n    if (juiceClient[dimension + 'Elements'].indexOf(elName) > -1) {\n      for (var i in el.styleProps) {\n        if (el.styleProps[i].prop === dimension) {\n          if (el.styleProps[i].value.match(/px/)) {\n            var pxSize = el.styleProps[i].value.replace('px', '');\n            $(el).attr(dimension, pxSize);\n            return;\n          }\n          if (juiceClient.tableElements.indexOf(elName) > -1 && el.styleProps[i].value.match(/\\%/)) {\n            $(el).attr(dimension, el.styleProps[i].value);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  function setAttributesOnTableElements(el) {\n    if (!el.name) { return; }\n    var elName = el.name.toUpperCase();\n    var styleProps = Object.keys(juiceClient.styleToAttribute);\n\n    if (juiceClient.tableElements.indexOf(elName) > -1) {\n      for (var i in el.styleProps) {\n        if (styleProps.indexOf(el.styleProps[i].prop) > -1) {\n          $(el).attr(juiceClient.styleToAttribute[el.styleProps[i].prop], el.styleProps[i].value);\n        }\n      }\n    }\n  }\n}\n\nfunction parseContent(content) {\n  if (content === 'none' || content === 'normal') {\n    return '';\n  }\n\n  var imageUrlMatch = content.match(/^\\s*url\\s*\\(\\s*(.*?)\\s*\\)\\s*$/i);\n  if (imageUrlMatch) {\n    var url = imageUrlMatch[1].replace(/^['\"]|['\"]$/g, '');\n    return { img: url };\n  }\n\n  // Naive parsing, assume well-formed value\n  content = content.slice(1, content.length - 1);\n  // Naive unescape, assume no unicode char codes\n  content = content.replace(/\\\\/g, '');\n  return content;\n}\n\n// Return \"before\" or \"after\" if the given selector is a pseudo element (e.g.,\n// a::after).\nfunction getPseudoElementType(selector) {\n  if (selector.length === 0) {\n    return;\n  }\n\n  var pseudos = selector[selector.length - 1].pseudos;\n  if (!pseudos) {\n    return;\n  }\n\n  for (var i = 0; i < pseudos.length; i++) {\n    if (isPseudoElementName(pseudos[i])) {\n      return pseudos[i].name;\n    }\n  }\n}\n\nfunction isPseudoElementName(pseudo) {\n  return pseudo.name === 'before' || pseudo.name === 'after';\n}\n\nfunction filterElementPseudos(pseudos) {\n  return pseudos.filter(function(pseudo) {\n    return !isPseudoElementName(pseudo);\n  });\n}\n\nfunction juiceDocument($, options) {\n  options = utils.getDefaultOptions(options);\n  var css = extractCssFromDocument($, options);\n  css += '\\n' + options.extraCss;\n  inlineDocument($, css, options);\n  return $;\n}\n\nfunction getStylesData($, options) {\n  var results = [];\n  var stylesList = $('style');\n  var styleDataList, styleData, styleElement;\n  stylesList.each(function() {\n    styleElement = this;\n    styleDataList = styleElement.childNodes;\n    if (styleDataList.length !== 1) {\n      return;\n    }\n    styleData = styleDataList[0].data;\n    if (options.applyStyleTags && $(styleElement).attr('data-embed') === undefined) {\n      results.push(styleData);\n    }\n    if (options.removeStyleTags && $(styleElement).attr('data-embed') === undefined) {\n      var preservedText = utils.getPreservedText(styleElement.childNodes[0].nodeValue, {\n        mediaQueries: options.preserveMediaQueries,\n        fontFaces: options.preserveFontFaces\n      });\n      if (preservedText) {\n        styleElement.childNodes[0].nodeValue = preservedText;\n      } else {\n        $(styleElement).remove();\n      }\n    }\n    $(styleElement).removeAttr('data-embed');\n  });\n  return results;\n}\n\nfunction extractCssFromDocument($, options) {\n  var results = getStylesData($, options);\n  var css = results.join('\\n');\n  return css;\n}\n\nreturn juiceClient;\n\n};\n","/home/travis/build/npmtest/node-npmtest-juice/node_modules/juice/lib/cli.js":"'use strict';\n\nvar program = require('commander');\nvar pkg = require('../package');\n\nvar cli = {};\n\nmodule.exports = cli;\n\ncli.getProgram = function() {\n  program.name = pkg.name;\n\n  program.version(pkg.version)\n    .usage('[options] input.html output.html');\n\n  Object.keys(cli.options).forEach(function(key) {\n    program.option('--' + key + ' [value]', cli.options[key].def);\n  });\n\n  program.parse(process.argv);\n\n  return program;\n};\n\ncli.options = {\n  'css': {\n    pMap: 'css',\n    map: 'cssFile',\n    def: 'Add an extra CSS file by name' },\n  'options-file': {\n    pMap: 'optionsFile',\n    def: 'Load options from a JSON file' },\n  'extra-css': {\n    pMap: 'extraCss',\n    def: 'Add extra CSS' },\n  'insert-preserved-extra-css': {\n    pMap: 'insertPreservedExtraCss',\n    def: 'insert preserved @font-face and @media into document?',\n    coercion: JSON.parse },\n  'apply-style-tags': {\n    pMap: 'applyStyleTags',\n    def: 'inline from style tags?',\n    coercion: JSON.parse },\n  'remove-style-tags': {\n    pMap: 'removeStyleTags',\n    def: 'remove style tags?',\n    coercion: JSON.parse },\n  'preserve-media-queries': {\n    pMap: 'preserveMediaQueries',\n    def: 'preserve media queries?',\n    coercion: JSON.parse },\n  'preserve-font-faces': {\n    pMap: 'preserveFontFaces',\n    def: 'preserve media queries?',\n    coercion: JSON.parse },\n  'apply-width-attributes': {\n    pMap: 'applyWidthAttributes',\n    def: 'apply width attributes to relevent elements?',\n    coercion: JSON.parse },\n  'apply-height-attributes': {\n    pMap: 'applyHeightAttributes',\n    def: 'apply width attributes to relevent elements?',\n    coercion: JSON.parse },\n  'apply-attributes-table-elements': {\n    pMap: 'applyAttributesTableElements',\n    def: 'apply attributes with and equivalent CSS value to table elements?',\n    coercion: JSON.parse },\n  'xml-mode': {\n    pMap: 'xmlMode',\n    def: 'generate output with tags closed?  input must be valid XML',\n    coercion: JSON.parse },\n  'web-resources-inline-attribute': {\n    pMap: 'webResourcesInlineAttribute',\n    map: 'inlineAttribute',\n    def: 'see docs for web-resource-inliner inlineAttribute',\n    coercion: JSON.parse },\n  'web-resources-images': {\n    pMap: 'webResourcesImages',\n    map: 'images',\n    def: 'see docs for web-resource-inliner images',\n    coercion: JSON.parse },\n  'web-resources-links': {\n    pMap: 'webResourcesLinks',\n    map: 'links',\n    def: 'see docs for web-resource-inliner links',\n    coercion: JSON.parse },\n  'web-resources-scripts': {\n    pMap: 'webResourcesScripts',\n    map: 'scripts',\n    def: 'see docs for web-resource-inliner scripts',\n    coercion: JSON.parse },\n  'web-resources-relative-to': {\n    pMap: 'webResourcesRelativeTo',\n    map: 'relativeTo',\n    def: 'see docs for web-resource-inliner relativeTo' },\n  'web-resources-rebase-relative-to': {\n    pMap: 'webResourcesRebaseRelativeTo',\n    map: 'rebaseRelativeTo',\n    def: 'see docs for web-resource-inliner rebaseRelativeTo' },\n  'web-resources-cssmin': {\n    pMap: 'webResourcesCssmin',\n    map: 'cssmin',\n    def: 'see docs for web-resource-inliner cssmin',\n    coercion: JSON.parse },\n  'web-resources-uglify': {\n    pMap: 'webResourcesUglify',\n    map: 'uglify',\n    def: 'see docs for web-resource-inliner uglify',\n    coercion: JSON.parse },\n  'web-resources-strict': {\n    pMap: 'webResourcesStrict',\n    map: 'strict',\n    def: 'see docs for web-resource-inliner strict',\n    coercion: JSON.parse }\n};\n\ncli.argsToOptions = function(program) {\n  var result = { webResources: {} };\n  Object.keys(cli.options).forEach(function(key) {\n    var option = cli.options[key];\n    var value = program[option.pMap];\n    if (value !== undefined) {\n      if (option.coercion) {\n        value = option.coercion(value);\n      }\n\n      if (option.pMap.match(/webResources/)) {\n        result.webResources[option.map] = value;\n      } else {\n        result[option.map || option.pMap] = value;\n      }\n    }\n  });\n\n  return result;\n};\n"}